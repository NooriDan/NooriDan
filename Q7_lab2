void TestQ7_differntSizeInputs(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {11,22,33,88};
	int input_pos1[] = {0,2,7,9};

	int input_val2[] = {44,55};
	int input_pos2[] = {2,9};

	// initialization
	int size_val1 = 4;
	int size_val2 = 2;
	int actual_output_val[6]={0};
   	int actual_output_pos[6]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[6]={11,  66,  33,  88+55,  0,0};
	int expected_output_pos[6]={0,   2,   7,   9,   0,0};
			
	for (int i=0; i<6; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}

void TestQ7_samePos(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {11,22,3,8};
	int input_pos1[] = {0,2,7,9};

	int input_val2[] = {1,2,3,4};
	int input_pos2[] = {0,2,7,9};

	// initialization
	int size_val1 = 4;
	int size_val2 = 4;
	int actual_output_val[8]={0};
   	int actual_output_pos[8]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[8]={12,  24,  6,  12, 0,0,0,0};
	int expected_output_pos[8]={0,   2,   7,   9, 0,0,0,0};
			
	for (int i=0; i<8; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}

void TestQ7_ZeroGenerating1(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {-1,22,33,-4, 1};
	int input_pos1[] = {0,2,7,9, 10};

	int input_val2[] = {1,-2,3,4};
	int input_pos2[] = {0,2,8,9};

	// initialization
	int size_val1 = 5;
	int size_val2 = 4;
	int actual_output_val[9]={0};
   	int actual_output_pos[9]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[9]={20,33,3,1,0,0,0,0,0};
	int expected_output_pos[9]={2,7,8,10,0,0,0,0,0};
			
	for (int i=0; i<9; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}

void TestQ7_ZeroGenerating2(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {-1,2,5};
	int input_pos1[] = {0,2,7};

	int input_val2[] = {1,-2,-5,4, 10};
	int input_pos2[] = {0,2,7,8,10};

	// initialization
	int size_val1 = 3;
	int size_val2 = 5;
	int actual_output_val[8]={0};
   	int actual_output_pos[8]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[8]={4,10,0,0,0,0,0,0};
	int expected_output_pos[8]={8,10,0,0,0,0,0,0};
			
	for (int i=0; i<8; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}

void TestQ7_ZeroGenerating3(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {-1,5};
	int input_pos1[] = {1,2};

	int input_val2[] = {-1,-2,-5,4};
	int input_pos2[] = {0,1,2,7};

	// initialization
	int size_val1 = 2;
	int size_val2 = 4;
	int actual_output_val[6]={0};
   	int actual_output_pos[6]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[6]={-1,-3,4,0,0,0};
	int expected_output_pos[6]={0, 1, 7,0,0,0};
			
	for (int i=0; i<6; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}

void TestQ7_allZeroGenerating(CuTest *tc) {
    
	// HARDCODED testcases
   	int input_val1[] = {-1,22};
	int input_pos1[] = {0,2};

	int input_val2[] = {1,-22};
	int input_pos2[] = {0,2};

	// initialization
	int size_val1 = 2;
	int size_val2 = 2;
	int actual_output_val[4]={0};
   	int actual_output_pos[4]={0};

	// addEff()
	addEff(input_val1, input_val2, actual_output_val, input_pos1, input_pos2, actual_output_pos, size_val1, size_val2);

	int expected_output_val[4]={0,0,0,0};
	int expected_output_pos[4]={0,0,0,0};
			
	for (int i=0; i<4; i++){
		CuAssertIntEquals(tc, expected_output_val[i], actual_output_val[i]);
		CuAssertIntEquals(tc, expected_output_pos[i], actual_output_pos[i]);
	}
}



	// Added
	SUITE_ADD_TEST(suite, TestQ7_differntSizeInputs);
	SUITE_ADD_TEST(suite, TestQ7_samePos);
	SUITE_ADD_TEST(suite, TestQ7_ZeroGenerating1);
	SUITE_ADD_TEST(suite, TestQ7_ZeroGenerating2);
	SUITE_ADD_TEST(suite, TestQ7_ZeroGenerating3);
	SUITE_ADD_TEST(suite, TestQ7_allZeroGenerating);
	// ^^^
